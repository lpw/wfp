Bounding box only from selected aircraft (or flyTo if one)

phones as aircraft
tailnum, location (gps?)
dest, alt, speed
INS? Instruments?
MX?

threshold for combining points

hide markers on initial render

monile phone progressive UI

Supervise parked aircraft?

TESTS

append to external/existing classesNames from lib like mapbox via React/classNames

fleet row: dest/parked schedule history mx launch land
need flight table in db, for past and future (diff tables?)

schedule/launch/cancel/delete
land/contigency

fleet /fleet /flms /fms /foc /aircraft /vehicles 
map /flights /flights?a=123&a=456 (commas, array, etc) /supervise /mvs /map
instruments /flights/123 /flight/123 (show map? nah, above)

launch chages fleet point to destination
back to fleet from supervise?
convert array into map?  And if so, on server response or in reducer?

convert to async/await from promises
airctaft status/location
distance

andd new points/locations

editing functionality:
explicit ordering of stages for rearranging
1) if explicit ordering, support parallel/peer-level stages within plan (same order number)?
2) if explicit ordering, if sharing stages between test plans, then ordering is a property of the stage-plan relationship (not a field in stages)
removal as well as adding new stages, adding new stage to another plan, adding and removing test plans, users, managing relationships, perhaps risks, statuses

data integrity and validation:
deleting functionality - logic backed-up with foreign key triggers, error handling (long strings, cycles like in managing, etc), actions
authentication and security (users, api calls, etc)

performance:
improved SQL queries like when getting points for a route
server-side rendering
more client-side ops, optimistic but temporary reaction
service workers (launch, cache, offline, lighthouse)
go back to seperate FE and BE servers
memoize selectors

testing:
error detection and handling (react boundaries, etc)
cleanup (consistency, naming, fragment shorthand, case, css, etc)
documentation (code, architecture, README)
lint/style (code, SQL caps, singularize tables, typescript or at least prop validation)
build, versioning, packaging, locks, deployment, runtime, startup, ui/api/db monitoring

misc:
migrate promises to async/await
policy on refetching stale content (perhaps background for performance and smoothness)
ui design and improvements
mobile presentation and performance
batch API
websockets for async updates from external database operations
manifest
SSL
search
React.StrictMode?
allow or dedup routes (same route, altitude?)
POST, PUT
/plan/id vs /plans/id
optimize DISTINCT for dups

